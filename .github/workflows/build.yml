name: build

# execute this workflow automatically, but only when pushing to master
on:
  push:
    branches: [ master ]
#  pull_request:
#    branches: [ master ]

jobs:

  mac:
    runs-on: macos-latest

    steps:

    - uses: actions/checkout@v2

    - name: Execute script to build MacOS .dmg file
      run: "./buildDmg.sh"
      shell: bash

    - uses: actions/upload-artifact@v2
      with:
        name: helloWorld-mac-x86_64
        path: pyinstaller/dist/helloWorld.dmg

    - name: Create dist tarball
      run: 'tar -cjvf helloWorld-mac-x86_64.${{ github.run_id }}.tar.bz2 pyinstaller/dist/*'
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_id }}_mac
        release_name: 'Public Build Artifact: Mac ${{ github.run_id }}'
        draft: false
        prerelease: true

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: helloWorld-mac-x86_64.${{ github.run_id }}.tar.bz2
        asset_name: helloWorld-mac-x86_64.${{ github.run_id }}.tar.bz2
        asset_content_type: application/x-bzip2

  windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Execute script to .exe in Windows
      run: "build/windows/buildExe.ps1"
      shell: powershell -Command "& '{0}'"

    - uses: actions/upload-artifact@v2
      with:
        name: Windows executable (x86_64)
        path: pyinstaller/dist/helloWorld

    - name: Create Release .zip
      run: 'Compress-Archive -DestinationPath helloWorld-windows-x86_64.${{ github.run_id }}.zip -Path pyinstaller\dist\*'
      shell: powershell

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_id }}_windows
        release_name: 'Public Build Artifact: Windows ${{ github.run_id }}'
        draft: false
        prerelease: true

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: helloWorld-windows-x86_64.${{ github.run_id }}.zip
        asset_name: helloWorld-windows-x86_64.${{ github.run_id }}.zip
        asset_content_type: application/zip

